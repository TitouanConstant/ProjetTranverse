const AuthenticationController = require('./controllers/AuthenticationController')
const AuthenticationControllerPolicy = require('./policies/AuthenticationControllerPolicy')
const AdminController = require('./controllers/AdminController')
const isAuthenticated = require('./policies/isAuthenticated')
const ActivitiesController = require('./controllers/ActivitiesController')
const CartController = require('./controllers/CartController')
const RatingController = require('./controllers/RatingController')

module.exports = (app) => {
  app.post('/register', AuthenticationControllerPolicy.register, AuthenticationController.register)
  app.post('/login', AuthenticationController.login)
  app.get('/admin/users', isAuthenticated, AdminController.getAllUsers)
  app.put('/admin/users/:userId', isAuthenticated, AdminController.updateUser)
  app.delete('/admin/users/:userId', isAuthenticated, AdminController.deleteUser)
  app.post('/admin/activities', isAuthenticated, ActivitiesController.addActivity)
  app.put('/admin/activities/:activityId', isAuthenticated, ActivitiesController.updateActivity)
  app.delete('/admin/activities/:activityId', isAuthenticated, ActivitiesController.deleteActivity)
  app.get('/activities', isAuthenticated, ActivitiesController.getAllActivities)
  app.get('/activities/search', isAuthenticated, ActivitiesController.searchActivities)
  app.get('/activities/sort', isAuthenticated, ActivitiesController.sortActivitiesByLocation)
  app.get('/activities/filtered', isAuthenticated, ActivitiesController.getFilteredActivities)
  app.get('/organizations', ActivitiesController.getOrganizations)
  app.post('/cart/add', isAuthenticated, CartController.addToCart)
  app.delete('/cart/remove/:activityId', isAuthenticated, CartController.removeFromCart)
  app.get('/cart', isAuthenticated, CartController.getCart)
  app.post('/cart/increase/:activityId', isAuthenticated, CartController.increaseCartItemQuantity)
  app.post('/cart/decrease/:activityId', isAuthenticated, CartController.decreaseCartItemQuantity)
  app.post('/checkout', isAuthenticated, CartController.checkout)
  app.post('/ratings', isAuthenticated, RatingController.addRating)
  app.get('/activities/:activityId/ratings', isAuthenticated, RatingController.getRatingsForActivity)
  app.get('/activities/:activityId/average-rating', isAuthenticated, RatingController.getAverageRatingForActivity)
  app.get('/ratings/breakdown/:activityId', isAuthenticated, RatingController.getRatingsBreakdownForActivity)
  app.get('/ratings/:activityId', isAuthenticated, RatingController.getUserRatingForActivity)
}
